// Code generated by ogen, DO NOT EDIT.

package api

// LoginUserBadRequest is response for LoginUser operation.
type LoginUserBadRequest struct{}

func (*LoginUserBadRequest) loginUserRes() {}

// LoginUserInternalServerError is response for LoginUser operation.
type LoginUserInternalServerError struct{}

func (*LoginUserInternalServerError) loginUserRes() {}

type LoginUserOK struct {
	Data OptLoginUserOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *LoginUserOK) GetData() OptLoginUserOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *LoginUserOK) SetData(val OptLoginUserOKData) {
	s.Data = val
}

func (*LoginUserOK) loginUserRes() {}

type LoginUserOKData struct {
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *LoginUserOKData) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *LoginUserOKData) SetToken(val OptString) {
	s.Token = val
}

type LoginUserReq struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// GetLogin returns the value of Login.
func (s *LoginUserReq) GetLogin() string {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *LoginUserReq) GetPassword() string {
	return s.Password
}

// SetLogin sets the value of Login.
func (s *LoginUserReq) SetLogin(val string) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *LoginUserReq) SetPassword(val string) {
	s.Password = val
}

// LoginUserUnauthorized is response for LoginUser operation.
type LoginUserUnauthorized struct{}

func (*LoginUserUnauthorized) loginUserRes() {}

// NewOptLoginUserOKData returns new OptLoginUserOKData with value set to v.
func NewOptLoginUserOKData(v LoginUserOKData) OptLoginUserOKData {
	return OptLoginUserOKData{
		Value: v,
		Set:   true,
	}
}

// OptLoginUserOKData is optional LoginUserOKData.
type OptLoginUserOKData struct {
	Value LoginUserOKData
	Set   bool
}

// IsSet returns true if OptLoginUserOKData was set.
func (o OptLoginUserOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUserOKData) Reset() {
	var v LoginUserOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUserOKData) SetTo(v LoginUserOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUserOKData) Get() (v LoginUserOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginUserOKData) Or(d LoginUserOKData) LoginUserOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginUserReq returns new OptLoginUserReq with value set to v.
func NewOptLoginUserReq(v LoginUserReq) OptLoginUserReq {
	return OptLoginUserReq{
		Value: v,
		Set:   true,
	}
}

// OptLoginUserReq is optional LoginUserReq.
type OptLoginUserReq struct {
	Value LoginUserReq
	Set   bool
}

// IsSet returns true if OptLoginUserReq was set.
func (o OptLoginUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginUserReq) Reset() {
	var v LoginUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginUserReq) SetTo(v LoginUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginUserReq) Get() (v LoginUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginUserReq) Or(d LoginUserReq) LoginUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
