// Code generated by ogen, DO NOT EDIT.

package api

// NewOptRegisterUserOKData returns new OptRegisterUserOKData with value set to v.
func NewOptRegisterUserOKData(v RegisterUserOKData) OptRegisterUserOKData {
	return OptRegisterUserOKData{
		Value: v,
		Set:   true,
	}
}

// OptRegisterUserOKData is optional RegisterUserOKData.
type OptRegisterUserOKData struct {
	Value RegisterUserOKData
	Set   bool
}

// IsSet returns true if OptRegisterUserOKData was set.
func (o OptRegisterUserOKData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterUserOKData) Reset() {
	var v RegisterUserOKData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterUserOKData) SetTo(v RegisterUserOKData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterUserOKData) Get() (v RegisterUserOKData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterUserOKData) Or(d RegisterUserOKData) RegisterUserOKData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterUserReq returns new OptRegisterUserReq with value set to v.
func NewOptRegisterUserReq(v RegisterUserReq) OptRegisterUserReq {
	return OptRegisterUserReq{
		Value: v,
		Set:   true,
	}
}

// OptRegisterUserReq is optional RegisterUserReq.
type OptRegisterUserReq struct {
	Value RegisterUserReq
	Set   bool
}

// IsSet returns true if OptRegisterUserReq was set.
func (o OptRegisterUserReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterUserReq) Reset() {
	var v RegisterUserReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterUserReq) SetTo(v RegisterUserReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterUserReq) Get() (v RegisterUserReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterUserReq) Or(d RegisterUserReq) RegisterUserReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// RegisterUserBadRequest is response for RegisterUser operation.
type RegisterUserBadRequest struct{}

func (*RegisterUserBadRequest) registerUserRes() {}

// RegisterUserConflict is response for RegisterUser operation.
type RegisterUserConflict struct{}

func (*RegisterUserConflict) registerUserRes() {}

// RegisterUserInternalServerError is response for RegisterUser operation.
type RegisterUserInternalServerError struct{}

func (*RegisterUserInternalServerError) registerUserRes() {}

type RegisterUserOK struct {
	Data OptRegisterUserOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *RegisterUserOK) GetData() OptRegisterUserOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RegisterUserOK) SetData(val OptRegisterUserOKData) {
	s.Data = val
}

func (*RegisterUserOK) registerUserRes() {}

type RegisterUserOKData struct {
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *RegisterUserOKData) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *RegisterUserOKData) SetToken(val OptString) {
	s.Token = val
}

type RegisterUserReq struct {
	Login    string `json:"login"`
	Password string `json:"password"`
}

// GetLogin returns the value of Login.
func (s *RegisterUserReq) GetLogin() string {
	return s.Login
}

// GetPassword returns the value of Password.
func (s *RegisterUserReq) GetPassword() string {
	return s.Password
}

// SetLogin sets the value of Login.
func (s *RegisterUserReq) SetLogin(val string) {
	s.Login = val
}

// SetPassword sets the value of Password.
func (s *RegisterUserReq) SetPassword(val string) {
	s.Password = val
}
