// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeGetOrdersResponse(response GetOrdersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GetOrdersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		e := new(jx.Encoder)
		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil

	case *GetOrdersNoContent:
		w.WriteHeader(204)
		span.SetStatus(codes.Ok, http.StatusText(204))

		return nil

	case *GetOrdersUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *GetOrdersInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}

func encodeLoadOrderResponse(response LoadOrderRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *LoadOrderOK:
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))

		return nil

	case *LoadOrderAccepted:
		w.WriteHeader(202)
		span.SetStatus(codes.Ok, http.StatusText(202))

		return nil

	case *LoadOrderBadRequest:
		w.WriteHeader(400)
		span.SetStatus(codes.Error, http.StatusText(400))

		return nil

	case *LoadOrderUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))

		return nil

	case *LoadOrderConflict:
		w.WriteHeader(409)
		span.SetStatus(codes.Error, http.StatusText(409))

		return nil

	case *LoadOrderUnprocessableEntity:
		w.WriteHeader(422)
		span.SetStatus(codes.Error, http.StatusText(422))

		return nil

	case *LoadOrderInternalServerError:
		w.WriteHeader(500)
		span.SetStatus(codes.Error, http.StatusText(500))

		return nil

	default:
		return errors.Errorf("unexpected response type: %T", response)
	}
}
